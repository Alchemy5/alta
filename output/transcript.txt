Audio:
Hello? Hello, are you hearing me? Yeah, I can hear you. Can you hear me? Yeah, I'm hearing you fine. Great. How are you? I'm pretty good. I'm pretty good. I actually just found out that as a video interview, so. Yeah, okay. It's okay. Yeah. Is this your first time using this platform? No, I used it before, but from two or three months ago. So recently, yeah. How are you? I've used other ones, but this is my first time using this particular one. Okay. Yeah.
This is my first time using this particular one. Yeah. OK. Are you a software engineer or are you seeking for a new opportunity? I'm looking for a new opportunity. Yeah. Yeah. What about you? I'm working recently in Plumberg, London office. OK. Yeah. OK. I'm in the Bay Area, California. OK. OK. Cool. Nice to meet you.
you. So it's supposed that I will start asking you first. Okay. So as you see, do you want some time to read the question first? Yeah, let me see. Okay. So it's the BST successor search. Yeah. Okay.
So in a binary search tree, an in-order successor of a node is defined as the node with the smallest key greater than the key of the input node. Given a node in a binary search tree, you're asked to write a function, find in-order successor, that returns the in-order successor of input node. If input node has a node,
If inputNode has no inorder successor, return null. Yes. So what you need to do, given a node, you have to get the smallest node which has the smallest value greater than the given one. If it exists, if it doesn't exist, just return null. And in the existing code, you have the struct for the node, which you will code in Java. Yeah, I'm going to code in Java. Okay.
So in, you have a class for node that contains a key and lift Android and you have access to the parent itself and the constructor takes a value for the key. And for the, the message that you need to fill, which is fine in order successors take the input node and return a node, which is a target one and knowledge if it doesn't exist. And you have the, you have some logic for the insert, but you don't.
but you don't need to take care about that. Okay. I'm sorry, can you say that last part again? You don't need to take care about the logic for the insert method, which is this part. Oh, okay, the insert method. Yeah, it doesn't matter for you. Okay. You will not need something like that. So all you need, just editing. Write your code here in this part, or this problem.
Okay. And then, so the input isn't necessarily the root. It could be any node in the tree. Yeah, it could be any node. Something like the tree example on the left, okay? Yeah. I gave you something like 9, okay? So I'm searching for the node which contains the element greater than 9 and the same node.
than 9 and at the same time is the smallest one so it will be 11 right? okay so I'm expecting when I give you 9 as an input you got me the note which is 11 this one something different if I go if I gave you 14 you need to return the root which is 20 okay because it's the first note greater than 14 I see okay
So, if I do have a 9, I want to return 11. If I have a 12, I want to return 14. Yes. Right. Okay. And I do have access to the parent nodes. Exactly. You have access to the parent. Okay. So, just going over a couple examples, say you give me 11.
11. 11, yeah. Then the in order would be 12, right? Exactly. Okay. So I'm just trying to think of the different cases that we can have here. Okay.
So yeah, let's just say use 12 as an example.